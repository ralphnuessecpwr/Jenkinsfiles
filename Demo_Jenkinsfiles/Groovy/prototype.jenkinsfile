import groovy.json.JsonSlurper
import groovy.json.JsonOutput 

def hostConnection      = 'de2ad7c3-e924-4dc2-84d5-d0c3afd3e756'
def hostName            = 'cwcc.nasa.cpwr.corp'
def hostCredentials     = 'ea48408b-b2be-4810-8f4e-5b5f35977eb1'
def cesCredentials      = '71063193-ee67-4b52-890a-58843f33c183'
def runtimeConfig       = 'ispw'
def stream              = "FTSDEMO"
def application         = "RXN1"
def sourceType          = "COB"
def targetLib           = "SALESSUP.${application}.${targetLevel}.${sourceType}"
def xferFolder          = "Xfer"
def fileExtension       = "cbl"
def targetPath          = ""
def assignmentId        = ""
def listOfXferFiles     = []
def ftpTextSetup        = ""
def ftpTextPut          = ""
def ftpTextClose        = "quit"
def ftpText             = ""
def assignmentInfoFile  = "assignmentInfo.json"

switch(targetLevel){
    case "QA1":
        targetPath = "DEV1"
    case "QA2":
        targetPath = "DEV2"
    default:
        targetPath = "DEV3"
}

node {

    stage("Initialize"){

        dir("./"){
            deleteDir()
        }

        checkout(
            changelog: false, 
            poll: false, 
            scm: [
                $class:         'PdsConfiguration', 
                connectionId:   hostConnection, 
                credentialsId:  hostCredentials, 
                fileExtension:  fileExtension, 
                filterPattern:  'HDDRXM0.NRB.TEST', 
                targetFolder:   xferFolder
            ]
        )

        withCredentials(
            [
                usernamePassword(
                    credentialsId:      hostCredentials, 
                    passwordVariable:   'pwTmp', 
                    usernameVariable:   'userTmp'
                )
            ]
        )
        {

            ftpTextSetup = """
open ${hostName}
${userTmp}
${pwTmp}
lcd ${xferFolder}
cd '${targetLib}'
ascii
hash
"""
        }

        echo "Search for:"
        echo "${xferFolder}/**/*.${fileExtension}"

        def listOfXferFilesPaths = findFiles(glob: "${xferFolder}/**/*.${fileExtension}")

        echo "Found"
        echo listOfXferFilesPaths.toString()

        listOfXferFilesPaths.each
        {
            def fileNameFull    = it.name            
            def fileNameBase    = fileNameFull.substring(0, fileNameFull.indexOf(".${fileExtension}"))
            ftpTextPut          = ftpTextPut + "put ${fileNameBase}.${fileExtension} ${fileNameBase}\n"

            echo "Adding File " + fileNameFull

            listOfXferFiles.add(fileNameFull)
        }

        ftpText = ftpTextSetup + ftpTextPut + ftpTextClose

        //writeFile(file: 'xfer.txt', text: ftpText)
        //def stdout = bat(returnStdout: true, script: 'ftp -i -s:xfer.txt')
        //echo stdout
    }

    stage('Create Assignment') {

        def response = ispwOperation(
            connectionId:           hostConnection, 
            consoleLogResponseBody: true, 
            credentialsId:          cesCredentials, 
            ispwAction:             'CreateAssignment', 
            ispwRequestBody: '''
                runtimeConfiguration=''' + runtimeConfig + '''
                stream=''' + stream + '''
                application=''' + application + '''
                defaultPath=''' + targetPath + '''
                description=NRB_Prototype
                assignmentPrefix=''' + application + '''
            '''     
        )

        assignmentId = new JsonSlurper().parseText(response.getContent()).assignmentId
        echo "Assignment ID: " + assignmentId

    }

    stage('Load Tasks') {

        def listOfTaskInfos = []

        listOfXferFiles.each{

            def taskInfo        = [:]
            def sourceMem       = it.substring(0, it.indexOf(".${fileExtension}"))
            taskInfo.memberName = sourceMem

            def response = ispwOperation(
                connectionId:           hostConnection, 
                consoleLogResponseBody: true, 
                credentialsId:          cesCredentials, 
                ispwAction:             'TaskLoad', 
                ispwRequestBody: '''
                    runtimeConfiguration=''' + runtimeConfig + '''
                    assignmentId=''' + assignmentId + '''
                    stream=''' + stream + '''
                    application=''' + application + '''
                    currentLevel=''' + targetLevel + '''
                    startingLevel=''' + targetPath + '''
                    moduleName=''' + sourceMem + '''
                    moduleType=''' + sourceType + '''
                '''
            )

        }
    }    

    stage('Deploy') {
        
        def response = ispwOperation(
            connectionId:           hostConnection, 
            consoleLogResponseBody: true, 
            credentialsId:          cesCredentials, 
            ispwAction:             'DeployAssignment', 
            ispwRequestBody: '''
                runtimeConfiguration=''' + runtimeConfig + '''
                assignmentId=''' + assignmentId + '''
                level=''' + targetLevel + '''
            '''
        )

    }

    stage('Get Assignment Info'){

        def response = ispwOperation(
            connectionId:   hostConnection, 
            credentialsId:  hostCredentials, 
            ispwAction: 'GetAssignmentTaskList', 
            ispwRequestBody: '''
                assignmentId=''' + assignmentId + '''
            '''
        )
        
        def assignmentInfo      = new JsonSlurper().parseText(response.getContent())
        def assignmentInfoJson  = new JsonOutput().toJson(assignmentInfo)
        
        echo assignmentInfoJson.toString()
        def assignmentInfoText  = assignmentInfoJson.toString()
        assignmentInfo          = null
        assignmentInfoJson      = null
        
        writeFile(file: "assignmentInfo.json", text: assignmentInfoText)
    }
}
/*
    input ''
    
    stage('Promote') {
        
        ispwOperation(
            connectionId:           hostConnection, 
            consoleLogResponseBody: true, 
            credentialsId:          cesCredentials, 
            ispwAction:             'PromoteAssignment', 
            ispwRequestBody: '''
                runtimeConfiguration=ISPW
                assignmentId=''' + assignmentId + '''
                level=''' + targetLevel + '''
            '''
        )
    }
}
*/