import groovy.json.JsonSlurper

def hostConnection      = 'de2ad7c3-e924-4dc2-84d5-d0c3afd3e756'
def hostName            = 'cwcc.nasa.cpwr.corp'
def hostCredentials     = 'ea48408b-b2be-4810-8f4e-5b5f35977eb1'
def cesCredentials      = '71063193-ee67-4b52-890a-58843f33c183'
def application         = "RXN1"
def sourceType          = "COB"
def targetLib           = "SALESSUP.${application}.${targetLevel}.${sourceType}"
def xferFolder          = "Xfer"
def fileExtension       = "cbl"
def devLevel            = ""
def assignmentId        = ""
def listOfXferFiles     = []
def ftpTextSetup        = ""
def ftpTextPut          = ""
def ftpTextClose        = "quit"
def ftpText             = ""

switch(targetLevel){
    case "QA1":
        devLevel = "DEV1"
    case "QA2":
        devLevel = "DEV2"
    default:
        devLevel = "DEV3"
}

node {

    stage("Initialize"){

        checkout(
            changelog: false, 
            poll: false, 
            scm: [
                $class:         'PdsConfiguration', 
                connectionId:   hostConnection, 
                credentialsId:  hostCredentials, 
                fileExtension:  fileExtension, 
                filterPattern:  'HDDRXM0.NRB.TEST', 
                targetFolder:   xferFolder
            ]
        )

        withCredentials(
            [
                usernamePassword(
                    credentialsId:      hostCredentials, 
                    passwordVariable:   'pwTmp', 
                    usernameVariable:   'userTmp'
                )
            ]
        )
        {

            ftpTextSetup = """
open ${hostName}
${userTmp}
${pwTmp}
lcd ${xferFolder}
cd '${targetLib}'
ascii
hash
"""
        }

        echo "Search for:"
        echo "${xferFolder}/**/*.${fileExtension}"

        def listOfXferFilesPaths = findFiles(glob: "${xferFolder}/**/*.${fileExtension}")

        echo "Found"
        echo listOfXferFilesPaths.toString()

        listOfXferFilesPaths.each
        {
            def fileNameFull    = it.name            
            def fileNameBase    = fileNameFull.substring(0, fileNameFull.indexOf(".${fileExtension}"))
            ftpTextPut          = ftpTextPut + "put ${fileNameBase}.${fileExtension} ${fileNameBase}\n"

            echo "Adding File " + fileNameFull

            listOfXferFiles.add(fileNameFull)
        }

        ftpText = ftpTextSetup + ftpTextPut + ftpTextClose

        writeFile(file: 'xfer.txt', text: ftpText)

        def stdout = bat(returnStdout: true, script: 'ftp -i -s:xfer.txt')

        echo stdout

    }
}
/*
    stage('Copy File') {

        topazSubmitFreeFormJcl(
            connectionId:       hostConnection, 
            credentialsId:      hostCredentials,
            maxConditionCode:   '4',
            jcl:                jclText
        )

    }
    
    stage('Create Assignment') {

        def response = ispwOperation(
            connectionId:           hostConnection, 
            consoleLogResponseBody: true, 
            credentialsId:          cesCredentials, 
            ispwAction:             'CreateAssignment', 
            ispwRequestBody: '''
                runtimeConfiguration=ISPW
                stream=FTSDEMO
                application=RXN1
                defaultPath=DEV1
                description=NRB_Prototype
                assignmentPrefix=RXN1
            '''     
        )

        assignmentId = new JsonSlurper().parseText(response.getContent()).assignmentId
        echo "Assignment ID: " + assignmentId

    }

    stage('Load Task') {
        
        ispwOperation(
            connectionId:           hostConnection, 
            consoleLogResponseBody: true, 
            credentialsId:          cesCredentials, 
            ispwAction:             'TaskLoad', 
            ispwRequestBody: '''
                runtimeConfiguration=ISPW
                assignmentId=''' + assignmentId + '''
                stream=FTSDEMO
                application=RXN1
                currentLevel=QA1
                startingLevel=DEV1
                moduleName=''' + sourceMem + '''
                moduleType=''' + sourceType + '''
            '''
        )
    }

    stage('Deploy') {
        
        ispwOperation(
            connectionId:           hostConnection, 
            consoleLogResponseBody: true, 
            credentialsId:          cesCredentials, 
            ispwAction:             'DeployAssignment', 
            ispwRequestBody: '''
                runtimeConfiguration=ISPW
                assignmentId=''' + assignmentId + '''
                level=''' + targetLevel + '''
            '''
        )
    }

    input ''
    
    stage('Promote') {
        
        ispwOperation(
            connectionId:           hostConnection, 
            consoleLogResponseBody: true, 
            credentialsId:          cesCredentials, 
            ispwAction:             'PromoteAssignment', 
            ispwRequestBody: '''
                runtimeConfiguration=ISPW
                assignmentId=''' + assignmentId + '''
                level=''' + targetLevel + '''
            '''
        )
    }
}
*/