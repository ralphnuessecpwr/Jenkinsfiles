#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import jenkins.plugins.http_request.*
import java.net.URL
/**
 This is an example Jenkins Pipeline Script that runs a CI process against COBOL Code.  This pipeline is designed to be triggered from ISPW 
 on the promotion of code from a Test level in a controlled level.  The pipeline runs a series of quality checks on the 
 promoted code to ensure that it meets the quality standards that an organization defined in SonarQube.
 
 This Pipeline uses the following Jenkins Plugins
 Compuware Common Configuration Plugin - https://plugins.jenkins.io/compuware-common-configuration
 Compuware Source Code Download for Endevor, PDS, and ISPW Plugin - https://plugins.jenkins.io/compuware-scm-downloader
 Compuware Topaz for Total Test Plugin - https://plugins.jenkins.io/compuware-topaz-for-total-test
 Compuware Xpediter Code Coverage Plugin - https://plugins.jenkins.io/compuware-xpediter-code-coverage
 Pipeline Utilities Plugin - https://plugins.jenkins.io/pipeline-utility-steps
 SonarQube Scanner Plugin - https://plugins.jenkins.io/sonar
 XebiaLabs XL Release Plugin - https://plugins.jenkins.io/xlrelease-plugin
 
 This Pipeline Requires the below Parameters to be defined in the Jenkins Job
 The Jenkins Parameters can be supplied by a ISPW webhook by defining a webhook like the example below.  
 Please note that the assignment is not currently available in the webhook, but will be added in a future release.
 http://<<your jenkins server>>/job/<<you jenkins job>>/buildWithParameters?ISPW_Stream=$$stream$$&ISPW_Container=$$release$$&ISPW_Src_Level=$$level$$&SetId=$$setID$$&ISPW_Release=$$release$$&Owner=$$owner$$
 
 ISPW Webhook Parameter List, these parameters need to be defined in the Jenkins job configuration and will be passed by the ISPW Webhook
 @param ISPW_Stream - ISPW Stream that had the code promotion
 @param ISPW_Container - ISPW Container that had the code promotion
 @param ISPW_Container_Type - Type of ISPW Container that had the code promotion, 0 - Assignment, 1 - Release, 3 - Set
 @param ISPW_Release - The ISPW Release Value that will be passed to XL Release
 @param ISPW_Src_Level - ISPW Level that code was promoted from
 @param ISPW_Owner - The ISPW Owner value from the ISPW Set that was created for the promotion

 The Pipeline also takes the following parameters from the Jenkins Job, they also need to be defined in the Jenkins job configuration, the values need to be specified as defaults
 @param CES_Token - CES Personal Access Token.  These are configured in Compuware Enterprise Services / Security / Personal Access Tokens 
 @param Jenkins_CES_Token - Jenkins Credentials ID for the CES Personal Access Token
 @param HCI_Conn_ID - HCI Connection ID configured in the Compuware Common Configuration Plugin.  Use Pipeline Syntax Generator to determine this value. 
 @param HCI_Token - The ID of the Jenkins Credential for the TSO ID that will used to execute the pipeline
 @param CC_Repository - The Compuware Xpediter Code Coverage Repository that the Pipeline will use
 @param Git_Project - Github project/user used to store the Topaz for Total Test Projects
 @param Git_Credentials - Jenkins credentials for logging into git 
*/
/**
 Below is a list of parameters that is hardcoded into the Pipeline
 @param Git_URL - Url that will be used in various git commands
 @param Git_Ttt_Repo - Git repo that contains Topaz for Total Test Projects
 @param Git_Branch - Git branch to be used by the pipeline
 @param SQ_Scanner_Name - Name of SonarQube Scanner installation in "Manage Jenkins" -> "Global Tool Configuration" -> "SonarQube Scanner Installations"
 @param SQ_Server_Name - Name of SonarQube Server in "Manage Jenkins" -> "Configure System" -> "Sonar Qube servers"
 @param MF_Source - directory that contains cobol source downloaded from ISPW
 @param XLR_Template - XL Release template to trigger at the end of the Jenkins workflow
 @param XLR_User - XL Release user ID. Configured in Jenkins/Manage Jenkins/Configure System/XL Release credentials
 @param TTT_Folder - Folder to download TTT projects from GitHub into, i.e. store all TTT projects into one folder
 @param TTT_Vt_Environment - ID of a valid batch execution environment within the Topatz for Total Test repository (or local environment if local configuration is used for TTT)
 @param CES_Url - URL to the ISPW Rest API
 @param ISPW_Runtime - ISPW Runtime configuration
*/

 String Git_URL                     = "https://github.com/${Git_Project}"
 String Git_Ttt_Repo                = "${ISPW_Stream}_${ISPW_Application}_Unit_Tests.git"
 String Git_Branch                  = "master"
 String SQ_Scanner_Name             = "scanner" 
 String SQ_Server_Name              = "localhost"  
 String SQ_Project                  = "${JOB_NAME}" 
 String MF_Source                   = "MF_Source"
 String XLR_Template                = "A Release from Jenkins"
 String XLR_User                    = "admin"                           
 String TTT_Folder                  = "tests"	
 String TTT_Vt_Environment          = '5b508b8a787be73b59238d38'
 String TTT_Sonar_Results_File      = './TTTSonar/generated.cli.suite.sonar.xml'
 String CES_Url                     = "http://cwcc.compuware.com:2020"
 String ISPW_Runtime                = "ispw"	
 String ISPW_Changed_Programs_File  = 'changedPrograms.json'	 
 
/*
    Map containing ISPW Owners (TSO Users) to eMail addresses
    For sending mail when the Quality Gate fails
*/
 Map    mailRecipientMap            = ["HDDRXM0":"ralph.nuesse@compuware.com"]
 
/**
 Helper Methods for the Pipeline Script
*/

/**
 Determine the ISPW Path Number for use in Total Test
 @param Level - Level Parameter is the Level returned in the ISPW Webhook
*/
 def String getPathNum(String Level)
 {
    return Level.charAt(Level.length() - 1)
 }

/**
 Wrapper around the Git Plugin's Checkout Method
 @param URL - URL for the git server
 @param Branch - The branch that will be checked out of git
 @param Credentials - Jenkins credentials for logging into git
 @param Folder - Folder relative to the workspace that git will check out files into
*/
 def gitcheckout(String URL, String Branch, String Credentials, String Folder)
 {
    println "URL " + URL
    println "Branch " + Branch

    checkout(
        changelog:  false, 
        poll:       false, 
        scm:        [
            $class:                             'GitSCM', 
            branches:                           [[
                name: "*/${Branch}"
                ]], 
            doGenerateSubmoduleConfigurations:  false, 
            extensions:                         [[
                $class:             'RelativeTargetDirectory', 
                relativeTargetDir:  "${Folder}"
            ]], 
            submoduleCfg:                       [], 
            userRemoteConfigs:                  [[
                credentialsId:  "${Credentials}", 
                name:           'origin', 
                url:            "${URL}"
            ]]
        ]
    )
 }

// One node with several stages => All variables are local to the node and available to all stages
node{
    // Determine the current ISPW Path and Level that the code Promotion is from
    def PathNum = getPathNum(ISPW_Src_Level)

    // Also set the Level that the code currently resides in
    def ISPW_Target_Level = "QA" + PathNum

    def mailRecipient = mailRecipientMap[(ISPW_Owner.toUpperCase())]

    /* 
     This stage can be used is you want to clean out the workspace from any previously downloaded source from ISPW.  
     This stage shouldn't be necessary in the ordinary execution of the pipeline 
     */ 
   
    stage("clean previously downloaded source")
    {
        // Clean out any previously downloaded source
        dir(".\\") 
        {
            deleteDir()
        }
    }    

    def CC_DDIO_Override     = "SALESSUP.${ISPW_Application}.${ISPW_Target_Level}.SSD"

     /*
     This stage is used to retrieve source from ISPW
     */ 
    stage("Retrieve Code From ISPW")
    {

            checkout(
                changelog:  false, 
                poll:       false, 
                scm:        [
                    $class:             'IspwConfiguration', 
                    componentType:      'COB,COPY', 
                    connectionId:       "${HCI_Conn_ID}",
                    credentialsId:      "${HCI_Token}", 
                    folderName:         '', 
                    ispwDownloadAll:    true, 
                    levelOption:        '0', 
                    serverApplication:  "${ISPW_Application}",
                    serverConfig:       '', 
                    serverLevel:        "${ISPW_Target_Level}",  
                    serverStream:       "${ISPW_Stream}" 
                ]
            )

    }

    /* 
     This stage is used to retrieve Topaz for Total Tests from Git
     */ 
    stage("Retrieve Tests")
    {
        //Git_Branch = assignmentList[0].toString()
        echo "Checking out Branch " + Git_Branch

        //Retrieve the Tests from Github that match that ISPWW Stream and Application
        Git_URL = "${Git_URL}/${Git_Ttt_Repo}"

        //call gitcheckout wrapper function
        gitcheckout(Git_URL, Git_Branch, Git_Credentials, TTT_Folder)
    }

    stage("Execute related Unit Tests")
    {

        totaltest(
            serverUrl:                          CES_Url, 
            serverCredentialsId:                HCI_Token, 
            credentialsId:                      HCI_Token, 
            environmentId:                      TTT_Vt_Environment,
            localConfig:                        false,              // If you are not using the TTT repository and use the local TotalTestConfiguration, set to true
            //localConfigLocation:                tttConfigFolder,  // and point to workspace folder containing the local TotalTestConfiguration
            folderPath:                         TTT_Folder, 
            recursive:                          true, 
            selectProgramsOption:               true, 
            jsonFile:                           ISPW_Changed_Programs_File,
            haltPipelineOnFailure:              false,                 
            stopIfTestFailsOrThresholdReached:  false,
            createJUnitReport:                  true, 
            createReport:                       true, 
            createResult:                       true, 
            createSonarReport:                  true,
            contextVariables:                   '"ispw_app=' + ISPW_Application + ',ispw_level=' + ISPW_Target_Level + '"',
            collectCodeCoverage:                true,
            collectCCRepository:                CC_Repository,
            collectCCSystem:                    ISPW_Application,
            collectCCTestID:                    BUILD_NUMBER,
            clearCodeCoverage:                  false,
            logLevel:                           'INFO'
        )

        // Process the Total Test Junit result files into Jenkins
        junit allowEmptyResults: true, keepLongStdio: true, testResults: "TTTUnit/*.xml"
    }

    /* 
     This stage retrieve Code Coverage metrics from Xpediter Code Coverage for the test executed in the Pipeline
     */ 
    stage("Collect Coverage Metrics")
    {
            // Code Coverage needs to match the code coverage metrics back to the source code in order for them to be loaded in SonarQube
            // The source variable is the location of the source that was downloaded from ISPW
            def String ccSources="${ISPW_Application}\\${MF_Source}"

            // The Code Coverage Plugin passes it's primary configuration in the string or a file
            def ccproperties = 'cc.sources=' + sources + '\rcc.repos=' + CC_Repository + '\rcc.system=' + ISPW_Application  + '\rcc.test=' + BUILD_NUMBER + '\rcc.ddio.overrides=' + CC_DDIO_Override

            step(
                [
                    $class:                 'CodeCoverageBuilder',                    
                    connectionId:           HCI_Conn_ID, 
                    credentialsId:          HCI_Token,
                    analysisProperties:     ccproperties    // Pass in the analysisProperties as a string
                ]
            )
    }

    /* 
     This stage pushes the Source Code, Test Metrics and Coverage metrics into SonarQube and then checks the status of the SonarQube Quality Gate.  
     If the SonarQube quality date fails, the Pipeline fails and stops
     */ 
    stage("Check SonarQube Quality Gate") 
    {
        // Retrieve the location of the SonarQube Scanner bin files  
        def scannerHome = tool SQ_Scanner_Name

        withSonarQubeEnv(SQ_Server_Name)       // Name of the SonarQube server defined in Jenkins / Configure Systems / SonarQube server section
        {
            // Test definition path 
            def SQ_Scanner_Properties   = "-Dsonar.tests=tests"
            // Test results and Coverage results
            SQ_Scanner_Properties = SQ_Scanner_Properties + " -Dsonar.testExecutionReportPaths=" + TTT_Sonar_Results_File + " -Dsonar.coverageReportPaths=Coverage/CodeCoverage.xml"
            // SonarQube project to load results into
            SQ_Scanner_Properties = SQ_Scanner_Properties + " -Dsonar.projectKey=${JOB_NAME}_TST -Dsonar.projectName=${JOB_NAME}_TST -Dsonar.projectVersion=1.0"
            // Location of the Cobol Source Code to scan
            SQ_Scanner_Properties = SQ_Scanner_Properties + " -Dsonar.sources=${ISPW_Application}\\MF_Source"
            // Location of the Cobol copybooks to scan
            SQ_Scanner_Properties = SQ_Scanner_Properties + " -Dsonar.cobol.copy.directories=${ISPW_Application}\\MF_Source"  
            // File extensions for Cobol and Copybook files.  The Total Test files need that contain tests need to be defined as cobol for SonarQube to process the results
            SQ_Scanner_Properties = SQ_Scanner_Properties + " -Dsonar.cobol.file.suffixes=cbl,testsuite,testscenario,stub -Dsonar.cobol.copy.suffixes=cpy -Dsonar.sourceEncoding=UTF-8"
            
            // Call the SonarQube Scanner with properties defined above
            bat "${scannerHome}/bin/sonar-scanner" + SQ_Scanner_Properties
        }
        
        // Wait for the results of the SonarQube Quality Gate
        timeout(time: 2, unit: 'MINUTES') {
            
            // Wait for webhook call back from SonarQube.  SonarQube webhook for callback to Jenkins must be configured on the SonarQube server.
            def qg = waitForQualityGate()
            
            // Evaluate the status of the Quality Gate
            if (qg.status != 'OK')
            {
                echo "Sonar quality gate failure: ${qg.status}"
                echo "Pipeline will be aborted and ISPW Assignment will be regressed"

                echo "Regress Assignment ${ISPW_Assignment}, Level ${ISPW_Target_Level}"

                ispwOperation(
                    connectionId:           HCI_Conn_ID, 
                    credentialsId:          Jenkins_CES_Token,
                    consoleLogResponseBody: true,  
                    ispwAction:             'RegressAssignment', 
                    ispwRequestBody:        """
                        runtimeConfiguration=${ISPW_Runtime}
                        assignmentId=${ISPW_Assignment}
                        level=${ISPW_Target_Level}
                        """
                )
                    
                // Email
                emailext(
                    subject:    '$DEFAULT_SUBJECT',
                    body:       '$DEFAULT_CONTENT',
                    replyTo:    '$DEFAULT_REPLYTO',
                    to:         "${mailRecipient}"
                )
                
                error "Exiting Pipeline" // Exit the pipeline with an error if the SonarQube Quality Gate is failing
            }
        }   
        */
    }

    /* 
     This stage triggers a XL Release Pipeline that will move code into the high levels in the ISPW Lifecycle  
     */ 
    stage("Start release in XL Release")
    {
        // Use the Path Number to determine what QA Path to Promote the code from in ISPW.  This example has seperate QA paths in ISPW Lifecycle (i.e. DEV1->QA1->STG->PRD / DEV2->QA2->STG->PRD)
        def XLRPath = "QA" + PathNum 

        // Trigger XL Release Jenkins Plugin to kickoff a Release
        xlrCreateRelease(
            releaseTitle:       'A Release for $BUILD_TAG',
            serverCredentials:  "${XLR_User}",
            startRelease:       true,
            template:           "${XLR_Template}"
            variables:          [
                [propertyName:'ISPW_Dev_level',     propertyValue: "${ISPW_Target_Level}"], // Level in ISPW that the Code resides currently
                [propertyName: 'ISPW_RELEASE_ID',   propertyValue: "${ISPW_Release}"],     // ISPW Release value from the ISPW Webhook
                [propertyName: 'CES_Token',         propertyValue: "${CES_Token}"]
            ]
        )
    }
}